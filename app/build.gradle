plugins {
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.1.3'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'com.google.guava:guava:32.1.2-jre'
    implementation 'com.github.oshi:oshi-core:6.8.2'
    implementation 'com.google.code.gson:gson:2.10.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

javafx {
    version = "24.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing', 'javafx.base']
}

application {
    mainClass = 'br.com.mk.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
            includes = ['**/*']
        }
    }
}

// -----------------------------
// JLink + JPackage Config
// -----------------------------

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'InfoSys'
        mainClass = 'br.com.mk.App'
    }

    jpackage {
        installerName = 'InfoSys'
        appVersion = '1.0.0'
        vendor = 'Mateus Oliveira'
        installerOutputDir = file("${project.buildDir}/jpackage")

        def target = System.getenv('TARGET_OS') ?: 'linux-deb'

        if (target == 'windows') {
		    installerType = 'msi'
		    icon = file('src/main/resources/icons/AppIcon.png')
		} else if (target == 'mac') {
		    installerType = 'dmg'
		    icon = file('src/main/resources/icons/AppIcon.icns')
		} else if (target == 'linux-deb') {
		    installerType = 'deb'
		    icon = file('src/main/resources/icons/AppIcon.png')
		    installerOptions = [
		        '--linux-package-deps', 'libc6,libgtk-3-0,libxext6,libxrender1,libxtst6,libxi6,libx11-6,libxau6,libxdmcp6,libbsd0,libasound2,xdg-utils'
		    ]
		} else if (target == 'linux-rpm') {
		    installerType = 'rpm'
		    icon = file('src/main/resources/icons/AppIcon.png')
		    installerOptions = [
		        '--linux-package-deps', 'glibc,gtk3,libXext,libXrender,libXtst,libXi,libX11,libXau,libXdmcp,libbsd,alsa-lib,xdg-utils'
		    ]
		}


	}

    addExtraDependencies("javafx")
    addOptions('--add-modules', 'br.com.mk')
    addOptions('--module-path', configurations.runtimeClasspath.asPath)
}


// -----------------------------
// Tasks extras
// -----------------------------
tasks.register("jpackageInstaller") {
    group = "distribution"
    description = "Gera o instalador multiplataforma"
    dependsOn tasks.named("jpackage")
}

tasks.register("buildAll") {
    group = "distribution"
    description = "Gera instaladores multiplataforma usando TARGET_OS"
    doLast {
        println """
        Para gerar o instalador, execute:
        Windows:   TARGET_OS=windows ./gradlew jpackageInstaller
        macOS:     TARGET_OS=mac ./gradlew jpackageInstaller
        Debian:    TARGET_OS=linux-deb ./gradlew jpackageInstaller
        AppImage:  TARGET_OS=linux-rpm ./gradlew jpackageInstaller
        """
    }
}
